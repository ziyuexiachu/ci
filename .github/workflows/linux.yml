name: LinuxRelease

on:
  issue_comment:
    types: [ created ]  # 监听 issue 评论创建事件

env:
  RELEASE: ON
  BRANCH: ${{ github.event.comment.body }}

jobs:
  build:
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: 打印issue评论信息
        run: |
          echo "issue number :${{ github.event.issue.number }}"
          echo "issue 作者 :${{ github.event.comment.user.login }}"

      - name: 过滤issue评论
        if: github.event.issue.number != 1 || github.event.comment.user.login != 'ziyuexiachu'
        run: exit 1

      - name: 分支白名单
        run: |
          WHITELIST=("feature/transcode" "feature/1078" "feature/all" "feature/ts" "feature/codecs")
          # 判断提交消息是否在白名单中
          if [[ " ${WHITELIST[@]} " =~ " ${{ env.BRANCH }} " ]]; then
            echo "分支白名单匹配成功: ${{ env.BRANCH }}"
          else
            echo "分支白名单匹配失败: ${{ env.BRANCH }}, 中断编译!"
            exit 1
          fi

      - name: 下载源码
        uses: actions/checkout@v2
        with:
          repository: xia-chu/zlmediakit-promax
          fetch-depth: 1
          ref: ${{ env.BRANCH }}
          token: ${{ secrets.ACCESS_TOKEN }}
          path: .

      - name: 获取git hash
        run: |
          echo "HASH=$(git log -1 --format='%H')" >> $GITHUB_ENV

      - name: 查询是否是试用版本
        run: |
          if grep -q "RELEASE_VERSION" CMakeLists.txt; then
            echo "存在试用版本开关"
          else
            echo "试用版本开关不存在, 中断编译!"
            exit 1
          fi

      - name: 下载submodule源码
        run: mv -f .gitmodules_github .gitmodules && git submodule sync && git submodule update --init

      - name: 下载 SRTP
        uses: actions/checkout@v2
        with:
          repository: cisco/libsrtp
          fetch-depth: 1
          ref: v2.3.0
          path: 3rdpart/libsrtp

      - name: 下载 openssl
        uses: actions/checkout@v2
        with:
          repository: openssl/openssl
          fetch-depth: 1
          ref: OpenSSL_1_1_1
          path: 3rdpart/openssl

      - name: 下载 usrsctp
        uses: actions/checkout@v2
        with:
          repository: sctplab/usrsctp
          fetch-depth: 1
          ref: 0.9.5.0
          path: 3rdpart/usrsctp

      - name: 下载 ffmpeg
        uses: actions/checkout@v2
        with:
          repository: FFmpeg/FFmpeg
          fetch-depth: 1
          ref: release/6.1
          path: 3rdpart/ffmpeg


      - name: 下载 x264
        uses: actions/checkout@v2
        with:
          repository: mirror/x264
          fetch-depth: 1
          ref: stable
          path: 3rdpart/x264

      - name: 下载 x265
        uses: actions/checkout@v2
        with:
          repository: videolan/x265
          fetch-depth: 1
          ref: 3.4
          path: 3rdpart/x265

      - name: 启动 Docker 容器, 在Docker 容器中执行脚本
        run: |
          docker pull centos:7 
          docker run -e RELEASE=${{ env.RELEASE }} -v $(pwd):/root -w /root --rm centos:7 sh -c "
            set -x
            mkdir -p /root/install
          
            yum install epel-release -y
            rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro
            rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm
          
            yum install -y git wget gcc gcc-c++ make
          
            wget https://www.nasm.us/pub/nasm/releasebuilds/2.13/linux/nasm-2.13-0.fc24.x86_64.rpm
            rpm -i nasm-2.13-0.fc24.x86_64.rpm
          
            wget https://github.com/Kitware/CMake/releases/download/v3.26.4/cmake-3.26.4-linux-x86_64.tar.gz
            tar -xzf cmake-3.26.4-linux-x86_64.tar.gz
            mv cmake-3.26.4-linux-x86_64 /usr/local/cmake-3.26.4
            ln -s /usr/local/cmake-3.26.4/bin/* /usr/local/bin/
          
            cd 3rdpart/x265/source
            mkdir build
            cd build
            cmake .. -DCMAKE_INSTALL_PREFIX=/root/install -DENABLE_SHARED=ON
            make -j $(nproc)
            make install
            cd ../../../../
          
            cd 3rdpart/x264
            ./configure --prefix=/root/install --enable-static
            make -j $(nproc)
            make install
            cd ../../
          
            cd 3rdpart/openssl
           ./Configure linux-x86_64 no-shared --prefix=/root/install
            make -j $(nproc)
            make install
            cd ../../
          
            cd 3rdpart/ffmpeg
            PKG_CONFIG_PATH=/root/install/lib/pkgconfig ./configure --enable-gpl --enable-version3 --enable-nonfree --enable-libx264 --enable-libx265 --enable-openssl --prefix=/root/install \
              --extra-cflags='-I/root/install/include' \
              --extra-ldflags='-L/root/install/lib -ldl -pthread' 
            make -j $(nproc)
            make install
            cd ../../
          
            cd 3rdpart/usrsctp
            mkdir build
            cd build
            cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=ON ..
            make -j $(nproc)
            make install
            cd ../../../
          
            cd 3rdpart/libsrtp && ./configure --enable-openssl  --with-openssl-dir=/root/install && make -j $(nproc) && make install
            cd ../../
          
            mkdir -p build
            cd build 
            PKG_CONFIG_PATH=/root/install/lib/pkgconfig cmake .. \
             -DOPENSSL_ROOT_DIR=/root/install \
             -DCMAKE_BUILD_TYPE=Release \
             -DRELEASE_VERSION=${{ env.RELEASE }} \
             -DENABLE_WEBRTC=ON \
             -DENABLE_FFMPEG=ON \
             -DENABLE_TESTS=OFF \
             -DENABLE_API=OFF 
          
            make -j $(nproc)
          
            cd ..
            rm -rf release/linux/Release/*.a
            cp -r /root/install release/linux/
          "

      - name: 设置环境变量
        run: |
          echo "TAG=$(echo ${{ env.BRANCH }} | tr -s "/\?%*:|\"<>" "_")" >> $GITHUB_ENV  
          echo "DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
          echo "DATE2=$(date +%s)" >> $GITHUB_ENV
          zip -r release.zip release/linux/

      - name: 发布信息
        run: |
          release_info="- 分支: ${{ env.BRANCH }}\n"
          release_info+="- git hash: ${{ env.HASH }}\n"
          release_info+="- 编译日期: ${{ env.DATE }}\n"
          release_info+="- 编译记录: [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n"
          release_info+="- 打包ci名: ${{ github.workflow }}\n"
          release_info+="- 开启特性: openssl/webrtc/datachannel/ffmpeg\n"
          release_info+="- 说明: 本二进制在centos7(x64)上编译，请确保您的机器系统不低于此版本\n"
          echo -e "$release_info" >> release/linux/release.txt

      - name: 创建 Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SELF_TOKEN }}
        with:
          release_name: ${{ github.workflow }}_${{ env.TAG }}_${{ env.DATE }}
          draft: false
          tag_name:  ${{ github.workflow }}_${{ env.TAG }}_${{ env.DATE }}_${{ env.DATE2 }}
          commitish: 1ac4a74335be6f1c0c444099d09296dbc548ff57
          prerelease: false
          owner: ziyuexiachu
          body_path:  release/linux/release.txt
          repo: zlmpro-release

      - name: 上传文件到 Release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SELF_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release.zip
          asset_name: ${{ github.workflow }}_${{ env.TAG }}_${{ env.DATE }}.zip
          asset_content_type: application/zip

      - name: 输出发布的文件下载链接
        run: |
          echo "Release URL: ${{ steps.create_release.outputs.html_url }}"
